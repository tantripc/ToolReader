
@{
    Layout = null;
}
<style>
    .modal-dialog {
        margin: 6.75rem auto !important;
    }

        .modal-dialog.modal-custom-icon .modal-content {
            height: 60% !important;
        }

</style>
<div style="display:flex;height: 50%;">
    <img id="crop_image" />
</div>
<div class="group-buttons-tool">
    <div style="width: 100%">
        <div class="cnt-control">
            <span class="control-zoom">
                <i class="iconmoon iconmoon-ZoomIn" data-method="zoom" data-option="-0.1"></i>
            </span>
            <span class="control-zoom">
                <i class="iconmoon iconmoon-ZoomOut" data-method="zoom" data-option="0.1"></i>
            </span>
            <span class="control-child">
                <i class="iconmoon iconmoon-RotateLeft" data-method="rotate" data-option="-45"></i>
                <i class="iconmoon iconmoon-RotateRight" data-method="rotate" data-option="45"></i>
                <i class="iconmoon iconmoon-FlipHorizontal" data-method="scaleY" data-option="-1"></i>
                <i class="iconmoon iconmoon-FlipVertical" data-method="scaleX" data-option="-1"></i>
            </span>
        </div>
        <div data-method="reset" class="control-reset">Reset</div>
    </div>
</div>
<link href="@Url.Content("~/lib/cropper/cropper.css")" rel="stylesheet" />
<link href="@Url.Content("~/css/cropimage.css")" asp-append-version="true" rel="stylesheet" />
<script src="@Url.Content("~/lib/cropper/cropper.js")"></script>
<script>

    function init_crop_image(obj) {
        var console = window.console || { log: function () { } };
        var URL = window.URL || window.webkitURL;
        var $image = $('#' + obj.id);
        var originalImageURL = $image.attr('src');
        var uploadedImageType = 'image/jpeg';
        var uploadedImageURL;
        console.log(obj.aspectRatio);
        var options = {
            aspectRatio: 0.70443349753,
            preview: '#' + obj.idpreview,
            crop: function (e) {
                
            }
        };
        if (obj.aspectRatio) {
            $('.group-buttons-tool select[name="aspectRatio"').val(obj.aspectRatio);
        }
        // Cropper
        $image.on({
            ready: function (e) {
                console.log(e.type);
            },
            cropstart: function (e) {
                console.log(e.type, e.action);
            },
            cropmove: function (e) {
                console.log(e.type, e.action);
            },
            cropend: function (e) {
                console.log(e.type, e.action);
            },
            crop: function (e) {
                console.log(e.type, e.x, e.y, e.width, e.height, e.rotate, e.scaleX, e.scaleY);
            },
            zoom: function (e) {
                console.log(e.type, e.ratio);
            }
        }).cropper(options);
        $('#crop_image').show();

        // Buttons
        if (!$.isFunction(document.createElement('canvas').getContext)) {
            $('button[data-method="getCroppedCanvas"]').prop('disabled', true);
        }

        if (typeof document.createElement('cropper').style.transition === 'undefined') {
            $('button[data-method="rotate"]').prop('disabled', true);
            $('button[data-method="scale"]').prop('disabled', true);
        }

        // Methods
        $('.group-buttons-tool').on('click', '[data-method]', function () {
            var $this = $(this);
            var data = $this.data();
            var cropper = $image.data('cropper');
            var cropped;
            var $target;
            var result;

            if ($this.prop('disabled') || $this.hasClass('disabled')) {
                return;
            }

            if (cropper && data.method) {
                data = $.extend({}, data); // Clone a new one

                if (typeof data.target !== 'undefined') {
                    $target = $(data.target);

                    if (typeof data.option === 'undefined') {
                        try {
                            data.option = JSON.parse($target.val());
                        } catch (e) {
                            console.log(e.message);
                        }
                    }
                }

                cropped = cropper.cropped;

                switch (data.method) {
                    case 'rotate':
                        if (cropped && options.viewMode > 0) {
                            $image.cropper('clear');
                        }

                        break;

                    case 'getCroppedCanvas':
                        if (uploadedImageType === 'image/jpeg') {
                            if (!data.option) {
                                data.option = {};
                            }

                            data.option.fillColor = '#fff';
                        }

                        break;
                }

                result = $image.cropper(data.method, data.option, data.secondOption);

                switch (data.method) {
                    case 'rotate':
                        if (cropped && options.viewMode > 0) {
                            $image.cropper('crop');
                        }

                        break;

                    case 'scaleX':
                    case 'scaleY':
                        $(this).data('option', -data.option);
                        break;

                    case 'getCroppedCanvas':
                        if (result) {

                        }

                        break;

                    case 'destroy':
                        if (uploadedImageURL) {
                            URL.revokeObjectURL(uploadedImageURL);
                            uploadedImageURL = '';
                            $image.attr('src', originalImageURL);
                        }

                        break;
                }

                if ($.isPlainObject(result) && $target) {
                    try {
                        $target.val(JSON.stringify(result));
                    } catch (e) {
                        console.log(e.message);
                    }
                }

            }
        });
        $('select.group-toggles-tool').change(function () {
            console.log($(this));
            var $this = $(this);
            var name = $this.attr('name');
            if (!$image.data('cropper')) {
                return;
            }
            options[name] = $this.val();
            $image.cropper('destroy').cropper(options);
        })
        //Toggles
        $('.group-toggles-tool').on('change', 'input', function () {
            var $this = $(this);
            var name = $this.attr('name');
            var type = $this.prop('type');
            var cropBoxData;
            var canvasData;

            if (!$image.data('cropper')) {
                return;
            }

            if (type === 'checkbox') {
                options[name] = $this.prop('checked');
                cropBoxData = $image.cropper('getCropBoxData');
                canvasData = $image.cropper('getCanvasData');

                options.ready = function () {
                    $image.cropper('setCropBoxData', cropBoxData);
                    $image.cropper('setCanvasData', canvasData);
                };
            } else if (type === 'radio') {
                options[name] = $this.val();
            }

            $image.cropper('destroy').cropper(options);
        });
        // Keyboard
        $(document.body).on('keydown', function (e) {

            if (!$image.data('cropper') || this.scrollTop > 300) {
                return;
            }

            switch (e.which) {
                case 37:
                    e.preventDefault();
                    $image.cropper('move', -1, 0);
                    break;

                case 38:
                    e.preventDefault();
                    $image.cropper('move', 0, -1);
                    break;

                case 39:
                    e.preventDefault();
                    $image.cropper('move', 1, 0);
                    break;

                case 40:
                    e.preventDefault();
                    $image.cropper('move', 0, 1);
                    break;
            }

        });
    }
</script>

